//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""FlightControls"",
            ""id"": ""26007563-91cb-4acc-9c42-35231a4f8496"",
            ""actions"": [
                {
                    ""name"": ""Pitch"",
                    ""type"": ""Value"",
                    ""id"": ""e24ef855-35be-42d1-8513-60338b7ae5f6"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""Invert"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Value"",
                    ""id"": ""42dab131-e057-4635-90be-e8469333f8e0"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Yaw"",
                    ""type"": ""Value"",
                    ""id"": ""3332e8e2-99d5-4ab1-bf0a-3cb6284d4546"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d4874d70-846f-4754-b911-f5d95daae20f"",
                    ""path"": ""<Gamepad>/leftStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""763aabd0-426f-4a06-a9e2-243b9d5859c3"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""1d14b6f3-279a-4f64-a7f6-d613dbe6944a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""aba1e776-8c48-49c4-b300-1a684dc6559e"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6b759580-f6ed-4722-93ff-21615134326f"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FlightControls
        m_FlightControls = asset.FindActionMap("FlightControls", throwIfNotFound: true);
        m_FlightControls_Pitch = m_FlightControls.FindAction("Pitch", throwIfNotFound: true);
        m_FlightControls_Roll = m_FlightControls.FindAction("Roll", throwIfNotFound: true);
        m_FlightControls_Yaw = m_FlightControls.FindAction("Yaw", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FlightControls
    private readonly InputActionMap m_FlightControls;
    private IFlightControlsActions m_FlightControlsActionsCallbackInterface;
    private readonly InputAction m_FlightControls_Pitch;
    private readonly InputAction m_FlightControls_Roll;
    private readonly InputAction m_FlightControls_Yaw;
    public struct FlightControlsActions
    {
        private @PlayerInputActions m_Wrapper;
        public FlightControlsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pitch => m_Wrapper.m_FlightControls_Pitch;
        public InputAction @Roll => m_Wrapper.m_FlightControls_Roll;
        public InputAction @Yaw => m_Wrapper.m_FlightControls_Yaw;
        public InputActionMap Get() { return m_Wrapper.m_FlightControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlightControlsActions set) { return set.Get(); }
        public void SetCallbacks(IFlightControlsActions instance)
        {
            if (m_Wrapper.m_FlightControlsActionsCallbackInterface != null)
            {
                @Pitch.started -= m_Wrapper.m_FlightControlsActionsCallbackInterface.OnPitch;
                @Pitch.performed -= m_Wrapper.m_FlightControlsActionsCallbackInterface.OnPitch;
                @Pitch.canceled -= m_Wrapper.m_FlightControlsActionsCallbackInterface.OnPitch;
                @Roll.started -= m_Wrapper.m_FlightControlsActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_FlightControlsActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_FlightControlsActionsCallbackInterface.OnRoll;
                @Yaw.started -= m_Wrapper.m_FlightControlsActionsCallbackInterface.OnYaw;
                @Yaw.performed -= m_Wrapper.m_FlightControlsActionsCallbackInterface.OnYaw;
                @Yaw.canceled -= m_Wrapper.m_FlightControlsActionsCallbackInterface.OnYaw;
            }
            m_Wrapper.m_FlightControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pitch.started += instance.OnPitch;
                @Pitch.performed += instance.OnPitch;
                @Pitch.canceled += instance.OnPitch;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @Yaw.started += instance.OnYaw;
                @Yaw.performed += instance.OnYaw;
                @Yaw.canceled += instance.OnYaw;
            }
        }
    }
    public FlightControlsActions @FlightControls => new FlightControlsActions(this);
    public interface IFlightControlsActions
    {
        void OnPitch(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnYaw(InputAction.CallbackContext context);
    }
}
